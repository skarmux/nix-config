# Yubikey based Full Disk Encryption (FDE) on NixOS:
# https://nixos.wiki/wiki/Yubikey_based_Full_Disk_Encryption_(FDE)_on_NixOS
# Nix Shell: nix-shell https://github.com/sgillespie/nixos-yubikey-luks/archive/master.tar.gz
{ lib, inputs, ... }:
{
  # Minimal list of modules to use the EFI system partition and the YubiKey
  boot.initrd.kernelModules = [ "vfat" "nls_cp437" "nls_iso8859-1" "usbhid" ];
  # Enable support for the YubiKey PBA
  boot.initrd.luks.yubikeySupport = true;
  # Configuration to use your Luks device
  boot.initrd.luks.devices = {
    "$LUKSROOT" = {
      device = "$LUKS_PART";
      preLVM = true; # You may want to set this to false if you need to start a network service first
      yubikey = {
        slot = 2;
        twoFactor = true; # Set to false if you did not set up a user password.
        storage = {
          device = "$EFI_PART";
        };
      };
    }; 
  };

  boot.initrd = {
    supportedFilesystems = [ "btrfs" ];
    # postResumeCommands = lib.mkAfter /* sh */ ''
    #   # Reset the `root` partition on every boot.
    #   mkdir -p /tmp
    #   MOUNT=$(mktemp -d)
    #   (
    #     # Mount the `btrfs` partition
    #     mount -t btrfs -o subvol=/ ${mainDevice} "$MOUNT"

    #     # Automatically unmount when the shell session exits.
    #     trap 'umount "$MOUNT"' EXIT

    #     # Backup root subvolume
    #     # Move contents of current `root` subvolume to `old_roots` with a timestamp.
    #     if [[ -e $MOUNT/root ]]; then
    #         mkdir -p $MOUNT/old_roots
    #         timestamp=$(date --date="@$(stat -c %Y $MOUNT/root)" "+%Y-%m-%-d_%H:%M:%S")
    #         # This moves and renames the actual subvolume!
    #         mv $MOUNT/root "$MOUNT/old_roots/$timestamp"
    #     fi

    #     # Delete all old_root/<timestamp> subvolumes older than 30 days.
    #     delete_subvolume_recursively() {
    #         IFS=$'\n'
    #         for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
    #             delete_subvolume_recursively "$MOUNT/$i"
    #         done
    #         btrfs subvolume delete "$1"
    #     }
    #     for i in $(find $MOUNT/old_roots/ -maxdepth 1 -mtime +30); do
    #         delete_subvolume_recursively "$i"
    #     done

    #     # Create new `root` subvolume
    #     btrfs subvolume create /btrfs_tmp/root
    #   )
    # '';
  };

  # `noatime` (No Access Time) disables the writing of the last access time on files/directories.
  # It reduces writes and therefore increases performance and disk longevity.

  fileSystems = {
    "/boot" = { device = "/dev/nvme1n1p1"; fsType = "vfat"; options = [ "umask=0077" ]; };

    "/" = 
      { device = "/dev/partitions/fsroot"; fsType = "btrfs"; options = [ "noatime" "subvol=root" ]; };
    "/nix" =
      { device = "/dev/partitions/fsroot"; fsType = "btrfs"; options = [ "noatime" "subvol=nix" ]; };
    "/persist" =
      { device = "/dev/partitions/fsroot"; fsType = "btrfs"; options = [ "noatime" "subvol=persist" ]; neededForBoot = true; };
  };

  # imports = [ inputs.disko.nixosModules.disko ];

  # # sudo nix --experimental-features "nix-command flakes" run github:nix-community/disko/latest -- --mode destroy,format,mount --flake .#ignika
  # disko.devices = {

  #   disk.main = {
  #     type = "disk";
  #     device = "/dev/nvme0n1"; # names can vary!!!
  #     content = {
  #       type = "gpt";
  #       partitions = {
  #         ESP = {
  #           size = "512M";
  #           type = "EF00";
  #           content = {
  #             type = "filesystem";
  #             format = "vfat";
  #             mountpoint = "/boot";
  #             mountOptions = [ "umask=007" ];
  #           };
  #         };
  #         # https://wiki.archlinux.org/title/Universal_2nd_Factor#Data-at-rest_encryption_with_LUKS
  #         luks = {
  #           size = "100%";
  #           content = {
  #             type = "luks";
  #             name = "crypt";
  #             # disable settings.keyFile if you want to use interactive password entry
  #             passwordFile = "/tmp/secret.key"; # Interactive TODO needs to be generated by script
  #             settings = {
  #               allowDiscards = true;
  #               #keyFile = "/tmp/secret.key";
  #               crypttabExtraOpts = [
  #                 "fido2-device=auto"
  #                 "token-timeout=10"
  #               ];
  #             };
  #             # additionalKeyFiles = [ "/tmp/additionalSecret.key" ];
  #             # mountpoint = "/root_vg";
  #             content = {
  #               type = "btrfs";
  #               extraArgs = [ "-f" ]; # Override existing partition
  #               subvolumes = {
  #                 "/root" = {
  #                   mountpoint = "/";
  #                   mountOptions = [ "compress=zstd" "noatime" ];
  #                 };
  #                 "/nix" = {
  #                   mountpoint = "/nix";
  #                   mountOptions = [ "compress-zstd" "noatime" ];
  #                 };
  #                 "/persist" = {
  #                   mountpoint = "/persist";
  #                   mountOptions = [ "compress-zstd" "noatime" ];
  #                 };
  #               };
  #             };
  #           };
  #         };
  #       };
  #     };
  #   };

  # };

}
